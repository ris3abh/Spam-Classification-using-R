spdtm
dataSparse = as.data.frame(as.matrix(spdtm))
colnames(dataSparse) = make.names(colnames(dataSparse))
sort(colSums(dataSparse))
dataSparse$Category = data$Category
sort(colSums(subset(dataSparse, Category == 1)))
sort(colSums(subset(dataSparse, Category == 2)))
freq<- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf<- data.frame(word=names(freq), freq=freq)
head(wf)
pp <- ggplot(subset(wf, freq>100), aes(x=reorder(word, -freq), y =freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pp
library("wordcloud")
library("RColorBrewer")
set.seed(1234)
wordcloud(words = wf$word, freq = wf$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataSparse$Category = as.factor(dataSparse$Category)
library(caTools)
set.seed(123)
spl = sample.split(dataSparse$Category, 0.7)
train = subset(dataSparse, spl == TRUE)
test = subset(dataSparse, spl == FALSE)
#Setting the training and testing data groups
spamLog = glm(Category~., data=train, family="binomial")
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART = rpart(Category~., data=train, method="class")
prp(spamCART)
library(randomForest)
set.seed(123)
spamRF = randomForest(Category~., data=train)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
system.time( SpamNB <- naiveBayes(train, train$Category, laplace = 1,
trControl = control,tuneLength = 7) )
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
system.time( spamNB <- naiveBayes(train, train$Category, laplace = 1,
trControl = control,tuneLength = 7) )
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
predTrainSVM = predict(spamSVM)
library(e1071)
library(caret)
data<- read.csv("spam.csv", stringsAsFactors = FALSE)
#Transfer values in "Category" into number for convenience of following processing
#In this case, "1" represent "ham" and "2" represent "spam"
data$Category <- as.numeric(as.factor(data$Category))
#data$Category <- as.factor(data$Category)
str(data)
table(data$Category)
library(tm)
#Build a new corpus variable called corpus
corpus = VCorpus(VectorSource(data$Message))
# convert the text to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, PlainTextDocument)
# remove all punctuation from the corpus
corpus = tm_map(corpus, removePunctuation)
# remove all English stopwords from the corpus
corpus = tm_map(corpus, removeWords, stopwords("en"))
# stem the words in the corpus
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
dtm
spdtm = removeSparseTerms(dtm, 0.99)
spdtm
dataSparse = as.data.frame(as.matrix(spdtm))
colnames(dataSparse) = make.names(colnames(dataSparse))
sort(colSums(dataSparse))
dataSparse$Category = data$Category
sort(colSums(subset(dataSparse, Category == 1)))
sort(colSums(subset(dataSparse, Category == 2)))
freq<- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf<- data.frame(word=names(freq), freq=freq)
head(wf)
pp <- ggplot(subset(wf, freq>100), aes(x=reorder(word, -freq), y =freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pp
library("wordcloud")
library("RColorBrewer")
set.seed(1234)
wordcloud(words = wf$word, freq = wf$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataSparse$Category = as.factor(dataSparse$Category)
library(caTools)
set.seed(123)
spl = sample.split(dataSparse$Category, 0.7)
train = subset(dataSparse, spl == TRUE)
test = subset(dataSparse, spl == FALSE)
#Setting the training and testing data groups
spamLog = glm(Category~., data=train, family="binomial")
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART = rpart(Category~., data=train, method="class")
prp(spamCART)
library(randomForest)
set.seed(123)
spamRF = randomForest(Category~., data=train)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
system.time( spamNB <- naiveBayes(train, train$Category, laplace = 1,
trControl = control,tuneLength = 7) )
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
predTrainSVM = predict(spamSVM)
table(train$Category, predTrainLog > 0.5)
library(e1071)
library(caret)
data<- read.csv("spam.csv", stringsAsFactors = FALSE)
#Transfer values in "Category" into number for convenience of following processing
#In this case, "1" represent "ham" and "2" represent "spam"
data$Category <- as.numeric(as.factor(data$Category))
#data$Category <- as.factor(data$Category)
str(data)
table(data$Category)
library(tm)
#Build a new corpus variable called corpus
corpus = VCorpus(VectorSource(data$Message))
# convert the text to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, PlainTextDocument)
# remove all punctuation from the corpus
corpus = tm_map(corpus, removePunctuation)
# remove all English stopwords from the corpus
corpus = tm_map(corpus, removeWords, stopwords("en"))
# stem the words in the corpus
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
dtm
spdtm = removeSparseTerms(dtm, 0.99)
spdtm
dataSparse = as.data.frame(as.matrix(spdtm))
colnames(dataSparse) = make.names(colnames(dataSparse))
sort(colSums(dataSparse))
dataSparse$Category = data$Category
sort(colSums(subset(dataSparse, Category == 1)))
sort(colSums(subset(dataSparse, Category == 2)))
freq<- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf<- data.frame(word=names(freq), freq=freq)
head(wf)
pp <- ggplot(subset(wf, freq>100), aes(x=reorder(word, -freq), y =freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pp
library("wordcloud")
library("RColorBrewer")
set.seed(1234)
wordcloud(words = wf$word, freq = wf$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataSparse$Category = as.factor(dataSparse$Category)
library(caTools)
set.seed(123)
spl = sample.split(dataSparse$Category, 0.7)
train = subset(dataSparse, spl == TRUE)
test = subset(dataSparse, spl == FALSE)
#Setting the training and testing data groups
spamLog = glm(Category~., data=train, family="binomial")
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART = rpart(Category~., data=train, method="class")
prp(spamCART)
library(randomForest)
set.seed(123)
spamRF = randomForest(Category~., data=train)
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
library(e1071)
library(caret)
data<- read.csv("spam.csv", stringsAsFactors = FALSE)
#Transfer values in "Category" into number for convenience of following processing
#In this case, "1" represent "ham" and "2" represent "spam"
data$Category <- as.numeric(as.factor(data$Category))
#data$Category <- as.factor(data$Category)
str(data)
table(data$Category)
library(tm)
#Build a new corpus variable called corpus
corpus = VCorpus(VectorSource(data$Message))
# convert the text to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, PlainTextDocument)
# remove all punctuation from the corpus
corpus = tm_map(corpus, removePunctuation)
# remove all English stopwords from the corpus
corpus = tm_map(corpus, removeWords, stopwords("en"))
# stem the words in the corpus
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
dtm
spdtm = removeSparseTerms(dtm, 0.99)
spdtm
dataSparse = as.data.frame(as.matrix(spdtm))
colnames(dataSparse) = make.names(colnames(dataSparse))
sort(colSums(dataSparse))
dataSparse$Category = data$Category
sort(colSums(subset(dataSparse, Category == 1)))
sort(colSums(subset(dataSparse, Category == 2)))
freq<- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf<- data.frame(word=names(freq), freq=freq)
head(wf)
pp <- ggplot(subset(wf, freq>100), aes(x=reorder(word, -freq), y =freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pp
library("wordcloud")
library("RColorBrewer")
set.seed(1234)
wordcloud(words = wf$word, freq = wf$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataSparse$Category = as.factor(dataSparse$Category)
library(caTools)
set.seed(123)
spl = sample.split(dataSparse$Category, 0.7)
train = subset(dataSparse, spl == TRUE)
test = subset(dataSparse, spl == FALSE)
#Setting the training and testing data groups
spamLog = glm(Category~., data=train, family="binomial")
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART = rpart(Category~., data=train, method="class")
prp(spamCART)
library(randomForest)
set.seed(123)
spamRF = randomForest(Category~., data=train)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
system.time( spamNB <- naiveBayes(train, train$Category, laplace = 1,
trControl = control,tuneLength = 7) )
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
predTrainSVM = predict(spamSVM)
table(train$Category, predTrainLog > 0.5)
(3359+453)/nrow(train)
install.packages("ROCR")
library(ROCR)
predictionTrainLog = prediction(predTrainLog, train$Category)
as.numeric(performance(predictionTrainLog, "auc")@y.values)
table(train$Category, predTrainCART>0.5)
(3338+368)/nrow(train)
predictionTrainCART = prediction(predTrainCART, train$Category)
as.numeric(performance(predictionTrainCART, "auc")@y.values)
table(train$Category, predTrainRF > 0.5)
(3340+424)/nrow(train)
predictionTrainRF = prediction(predTrainRF, train$Category)
as.numeric(performance(predictionTrainRF, "auc")@y.values)
table(train$Category, predTrainNB)
(969+515)/nrow(train)
predictionTrainNB = prediction(as.numeric(predTrainNB), as.numeric(train$Category))
as.numeric(performance(predictionTrainNB, "auc")@y.values)
table(train$Category, predTrainSVM)
(3376+456)/nrow(train)
predictionTrainSVM = prediction(as.numeric(predTrainSVM), as.numeric(train$Category))
as.numeric(performance(predictionTrainSVM, "auc")@y.values)
log_pred = predict(spamRF, newdata = test[-1210])
confusionMatrix(log_pred,test$Category)
predTestCART = predict(spamCART, newdata=test)[,2]
table(test$Category, predTestCART > 0.5)
(1416+146)/nrow(test)
predictionTestCART = prediction(predTestCART, test$Category)
as.numeric(performance(predictionTestCART, "auc")@y.values)
rf_pred = predict(spamRF, newdata = test[-1210])
confusionMatrix(table(rf_pred,test$Category))
nb_pred = predict(SpamNB, type = 'class', newdata = test)
confusionMatrix(nb_pred,test$Category)
svm_pred = predict(spamSVM, type = 'class', newdata = test)
confusionMatrix(svm_pred,test$Category)
library(e1071)
library(caret)
data<- read.csv("spam.csv", stringsAsFactors = FALSE)
#Transfer values in "Category" into number for convenience of following processing
#In this case, "1" represent "ham" and "2" represent "spam"
data$Category <- as.numeric(as.factor(data$Category))
#data$Category <- as.factor(data$Category)
str(data)
table(data$Category)
library(tm)
#Build a new corpus variable called corpus
corpus = VCorpus(VectorSource(data$Message))
# convert the text to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, PlainTextDocument)
# remove all punctuation from the corpus
corpus = tm_map(corpus, removePunctuation)
# remove all English stopwords from the corpus
corpus = tm_map(corpus, removeWords, stopwords("en"))
# stem the words in the corpus
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
dtm
spdtm = removeSparseTerms(dtm, 0.99)
spdtm
dataSparse = as.data.frame(as.matrix(spdtm))
colnames(dataSparse) = make.names(colnames(dataSparse))
sort(colSums(dataSparse))
dataSparse$Category = data$Category
sort(colSums(subset(dataSparse, Category == 1)))
sort(colSums(subset(dataSparse, Category == 2)))
freq<- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf<- data.frame(word=names(freq), freq=freq)
head(wf)
pp <- ggplot(subset(wf, freq>100), aes(x=reorder(word, -freq), y =freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pp
library("wordcloud")
library("RColorBrewer")
set.seed(1234)
wordcloud(words = wf$word, freq = wf$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataSparse$Category = as.factor(dataSparse$Category)
library(caTools)
set.seed(123)
spl = sample.split(dataSparse$Category, 0.7)
train = subset(dataSparse, spl == TRUE)
test = subset(dataSparse, spl == FALSE)
#Setting the training and testing data groups
spamLog = glm(Category~., data=train, family="binomial")
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART = rpart(Category~., data=train, method="class")
prp(spamCART)
library(randomForest)
set.seed(123)
spamRF = randomForest(Category~., data=train)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
system.time( spamNB <- naiveBayes(train, train$Category, laplace = 1,
trControl = control,tuneLength = 7) )
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
predTrainSVM = predict(spamSVM)
table(train$Category, predTrainLog > 0.5)
(3359+453)/nrow(train)
install.packages("ROCR")
library(ROCR)
predictionTrainLog = prediction(predTrainLog, train$Category)
as.numeric(performance(predictionTrainLog, "auc")@y.values)
table(train$Category, predTrainCART>0.5)
(3338+368)/nrow(train)
predictionTrainCART = prediction(predTrainCART, train$Category)
as.numeric(performance(predictionTrainCART, "auc")@y.values)
table(train$Category, predTrainRF > 0.5)
(3340+424)/nrow(train)
predictionTrainRF = prediction(predTrainRF, train$Category)
as.numeric(performance(predictionTrainRF, "auc")@y.values)
table(train$Category, predTrainNB)
(969+515)/nrow(train)
predictionTrainNB = prediction(as.numeric(predTrainNB), as.numeric(train$Category))
as.numeric(performance(predictionTrainNB, "auc")@y.values)
table(train$Category, predTrainSVM)
(3376+456)/nrow(train)
predictionTrainSVM = prediction(as.numeric(predTrainSVM), as.numeric(train$Category))
as.numeric(performance(predictionTrainSVM, "auc")@y.values)
log_pred = predict(spamRF, newdata = test[-1210])
confusionMatrix(log_pred,test$Category)
predTestCART = predict(spamCART, newdata=test)[,2]
table(test$Category, predTestCART > 0.5)
(1416+146)/nrow(test)
predictionTestCART = prediction(predTestCART, test$Category)
as.numeric(performance(predictionTestCART, "auc")@y.values)
rf_pred = predict(spamRF, newdata = test[-1210])
confusionMatrix(table(rf_pred,test$Category))
nb_pred = predict(SpamNB, type = 'class', newdata = test)
nb_pred = predict(spamNB, type = 'class', newdata = test)
confusionMatrix(nb_pred,test$Category)
svm_pred = predict(spamSVM, type = 'class', newdata = test)
confusionMatrix(svm_pred,test$Category)
library(e1071)
library(caret)
data<- read.csv("spam.csv", stringsAsFactors = FALSE)
#Transfer values in "Category" into number for convenience of following processing
#In this case, "1" represent "ham" and "2" represent "spam"
data$Category <- as.numeric(as.factor(data$Category))
#data$Category <- as.factor(data$Category)
str(data)
table(data$Category)
library(tm)
#Build a new corpus variable called corpus
corpus = VCorpus(VectorSource(data$Message))
# convert the text to lowercase
corpus = tm_map(corpus, content_transformer(tolower))
corpus = tm_map(corpus, PlainTextDocument)
# remove all punctuation from the corpus
corpus = tm_map(corpus, removePunctuation)
# remove all English stopwords from the corpus
corpus = tm_map(corpus, removeWords, stopwords("en"))
# stem the words in the corpus
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
dtm
spdtm = removeSparseTerms(dtm, 0.99)
spdtm
dataSparse = as.data.frame(as.matrix(spdtm))
colnames(dataSparse) = make.names(colnames(dataSparse))
sort(colSums(dataSparse))
dataSparse$Category = data$Category
sort(colSums(subset(dataSparse, Category == 1)))
sort(colSums(subset(dataSparse, Category == 2)))
freq<- sort(colSums(as.matrix(dtm)), decreasing=TRUE)
wf<- data.frame(word=names(freq), freq=freq)
head(wf)
pp <- ggplot(subset(wf, freq>100), aes(x=reorder(word, -freq), y =freq)) +
geom_bar(stat = "identity") +
theme(axis.text.x=element_text(angle=45, hjust=1))
pp
library("wordcloud")
library("RColorBrewer")
set.seed(1234)
wordcloud(words = wf$word, freq = wf$freq, min.freq = 1,
max.words=100, random.order=FALSE, rot.per=0.35,
colors=brewer.pal(8, "Dark2"))
dataSparse$Category = as.factor(dataSparse$Category)
library(caTools)
set.seed(123)
spl = sample.split(dataSparse$Category, 0.7)
train = subset(dataSparse, spl == TRUE)
test = subset(dataSparse, spl == FALSE)
#Setting the training and testing data groups
spamLog = glm(Category~., data=train, family="binomial")
summary(spamLog)
library(rpart)
library(rpart.plot)
spamCART = rpart(Category~., data=train, method="class")
prp(spamCART)
library(randomForest)
set.seed(123)
spamRF = randomForest(Category~., data=train)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
system.time( spamNB <- naiveBayes(train, train$Category, laplace = 1,
trControl = control,tuneLength = 7) )
library(e1071)
spamSVM <- svm(Category~., data=train)
predTrainLog = predict(spamLog, type="response")
predTrainCART = predict(spamCART)[,2]
predTrainRF = predict(spamRF, type="prob")[,2]
predTrainNB = predict(spamNB, newdata = train)
predTrainSVM = predict(spamSVM)
table(train$Category, predTrainLog > 0.5)
(3359+453)/nrow(train)
install.packages("ROCR")
library(ROCR)
predictionTrainLog = prediction(predTrainLog, train$Category)
as.numeric(performance(predictionTrainLog, "auc")@y.values)
table(train$Category, predTrainCART>0.5)
(3338+368)/nrow(train)
predictionTrainCART = prediction(predTrainCART, train$Category)
as.numeric(performance(predictionTrainCART, "auc")@y.values)
table(train$Category, predTrainRF > 0.5)
(3340+424)/nrow(train)
predictionTrainRF = prediction(predTrainRF, train$Category)
as.numeric(performance(predictionTrainRF, "auc")@y.values)
table(train$Category, predTrainNB)
(969+515)/nrow(train)
predictionTrainNB = prediction(as.numeric(predTrainNB), as.numeric(train$Category))
as.numeric(performance(predictionTrainNB, "auc")@y.values)
table(train$Category, predTrainSVM)
(3376+456)/nrow(train)
predictionTrainSVM = prediction(as.numeric(predTrainSVM), as.numeric(train$Category))
as.numeric(performance(predictionTrainSVM, "auc")@y.values)
log_pred = predict(spamRF, newdata = test[-1210])
confusionMatrix(log_pred,test$Category)
predTestCART = predict(spamCART, newdata=test)[,2]
table(test$Category, predTestCART > 0.5)
(1416+146)/nrow(test)
predictionTestCART = prediction(predTestCART, test$Category)
as.numeric(performance(predictionTestCART, "auc")@y.values)
rf_pred = predict(spamRF, newdata = test[-1210])
confusionMatrix(table(rf_pred,test$Category))
nb_pred = predict(spamNB, type = 'class', newdata = test)
confusionMatrix(nb_pred,test$Category)
svm_pred = predict(spamSVM, type = 'class', newdata = test)
confusionMatrix(svm_pred,test$Category)
